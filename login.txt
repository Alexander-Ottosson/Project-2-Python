# This file demonstrates a login feature using Python and HTML 

# ADD this to the app.py file
  import os
  app.secret_key = os.urandom(24)

==============================================================================================================

# ADD these imports to the controller file that will handle the login feature 

  import psycopg2
  import psycopg2.extras
  from flask import Flask, session, render_template, request, redirect, g, url_for, flash
  from util.db_connection import connection
  from services.form_service import FormService   # <- Import the service file that will be implemented
  from repositories.form_repo import FormRepo     # <- Import the repo file that will be implemented

  fr = FormRepo()
  fs: FormService = FormService(fr)

# ADD these routes within the same controller file handling the login feature

def route(app):

    @app.route('/', methods=['GET', 'POST'])
    def index():
    
        # Establish the connection
        cur = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)

        
        if request.method == 'POST' and 'username' in request.form and 'password' in request.form:
        
            # 'username' and 'password' will be read from what's in the HTML name= attribute upon sending the POST request
            # and stored into the 'name' and 'a_id' variables
            name = request.form['username']
            a_id = request.form['password']

            # The aforementioned variables are checked to see if they exist in the DB
            cur.execute('SELECT * FROM applicant WHERE name = %s AND a_id = %s', (name, a_id,))
            
            # If the 'name' and 'a_id' exist then they are fetched and stored into the 'applicant' variable
            applicant = cur.fetchone()
            # print(applicant)

            # If 'applicant' is valid then set the session loggedIn, id, and user to the appropriate values
            if applicant:
                session['loggedIn'] = True
                session['id'] = applicant['a_id']      # 'a_id' is from the DB
                session['user'] = applicant['name']    # 'name' is from the DB
                return redirect(url_for('protected'))  # Redirect to the 'protected' / logged in page

        return render_template('index.html')   # If the user input doesn't register with the DB then it returns them to the index.html page, Todo- return index.html without 'render_template'


    # Route for the protected/loggedin page
    @app.route('/protected/', methods=['GET', 'POST'])
    def protected():
        cur = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
        
        # Check again if the user and credentials are valid - if so render the logged in .html file
        if g.user:
            # print(g.user)
            return render_template('protected.html', user=session['user'], id=session['id'])  # Again return .html file without using 'render_template'
        return redirect(url_for('index'))  #  If not the valid signed in user then redirect to the index/log-in page


    # This is another security method for the session['user']
    @app.before_request
    def before_request():
        g.user = None

        if 'user' in session:
            g.user = session['user']
            
    #  Log out Route
    @app.route('/dropsession/')
    def dropsession():
        session.pop('user', None)
        return render_template('index.html')  #  Another 'render_template' that needs to change
        
        
 ===================================================================================================================
 
 <!-- login.html file -->
 
 <!DOCTYPE html>
<html lang="en">
<head>
    <title>TRMS Login</title>
</head>
<body>

<h1>Please Login</h1>

<form action="/" method="post">

  <!-- Here name="username" is utilized within the controller file *Specifically in lines 36 and 37 of this .txt file* -->
  Username <input type="text" name="username" id="user" required><br>
  Password <input type="password" name="password" id="pass" required><br>
  
  <input type="submit" id="submit">
</form>

</body>
</html>

=====================================================================================================================

<!-- protected.html file or logged out html file -->

<!DOCTYPE html>
<html lang="en">
<head>
    <title>TRMS User Page</title>
</head>
<body>

<!-- {{user}} is dynamically pulled from line 64 of this .txt file -->
<h1>Welcome {{ user }} to the Protected Page</h1>

<!-- Log out button that communicates with /dropsession route -->
<button onclick="window.location = 'http://localhost:5000/dropsession'" type="submit">Logout</button>


</body>
</html>

